#!/bin/sh
RUNS_IN_NOMAD=false
COOKLOG=/var/log/cook.log

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now after configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        service cook onestop || true
        service cook onedisable || true
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

convert_to_required_format() {
    echo "$1" | sed 's/\([^,]*\)/"\1"/g'
}

set -e
export HOME=/root

if [ -e /tmp/environment.sh ]
then
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
fi


########################################################################
## Check config
########################################################################

required_args="DATACENTER IP NODENAME CONSULSERVERS GOSSIPKEY DOMAIN"
required_args="$required_args EMAIL MAILHOST MAILUSER MAILPASS MAILFROM"
required_args="$required_args REDISHOST DBHOST DBUSER DBPASS DBNAME"
required_args="$required_args BUCKETNAME BUCKETUSER BUCKETPASS"
required_args="$required_args BUCKETALIAS BUCKETREGION S3HOSTNAME"
optional_args="MAILPORT DBPORT REDISPORT REMOTELOG MYSECRETKEY"
optional_args="$optional_args MYOTPSECRET MYVAPIDPRIVATEKEY MYVAPIDPUBLICKEY"
optional_args="$optional_args PVTCERT ELASTICENABLE ELASTICHOST ELASTICPORT"
optional_args="$optional_args ELASTICUSER ELASTICPASS DEEPLKEY DEEPLPLAN"
optional_args="$optional_args OWNERNAME OWNEREMAIL S3UPNOSSL"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

# Input is "10.0.0.1,10.2.0.1,10.45.2.4"
# Expected output is "10.0.0.1","10.2.0.1","10.45.2.4"

if [ -n "${CONSULSERVERS+x}" ]; then
    FIXCONSULSERVERS=$(convert_to_required_format "$CONSULSERVERS")
    export FIXCONSULSERVERS
fi

# set MAILPORT
if [ -n "${MAILPORT+x}" ]; then
	SETMAILPORT="$MAILPORT"
	export SETMAILPORT
else
    SETMAILPORT="25"
    export SETMAILPORT
fi

# set DBPORT
if [ -n "${DBPORT+x}" ]; then
	SETDBPORT="$DBPORT"
	export SETDBPORT
else
	SETDBPORT="5432"
	export SETDBPORT
fi

# set REDISPORT
if [ -n "${REDISPORT+x}" ]; then
	SETREDISPORT="$REDISPORT"
	export SETREDISPORT
else
	SETREDISPORT="6379"
	export SETREDISPORT
fi

# update variable for elasticsearch/zincsearch
# if not set, set some sane defaults but disabled
if [ -n "${ELASTICENABLE+x}" ]; then
	SETELASTICENABLE="true"
	export SETELASTICENABLE
    SETELASTICHOST="$ELASTICHOST"
	export SETELASTICHOST
    SETELASTICPORT="$ELASTICPORT"
	export SETELASTICPORT
    SETELASTICUSER="$ELASTICUSER"
	export SETELASTICUSER
    SETELASTICPASS="$ELASTICPASS"
	export SETELASTICPASS
else
    SETELASTICENABLE="false"
    export SETELASTICENABLE
    SETELASTICHOST="127.0.0.1"
    export SETELASTICHOST
    SETELASTICPORT="9200"
    export SETELASTICPORT
    SETELASTICUSER="elastic"
    export SETELASTICUSER
    SETELASTICPASS="password"
    export SETELASTICPASS
fi

# set deepl translate parameters, or set standard defaults
if [ -n "${DEEPLKEY+x}" ]; then
	SETDEEPLKEY="$DEEPLKEY"
	export SETDEEPLKEY
else
	SETDEEPLKEY="SIGN-UP-FOR-API-KEY"
	export SETDEEPLKEY
fi
if [ -n "${DEEPLPLAN+x}" ]; then
	SETDEEPLPLAN="$DEEPLPLAN"
	export SETDEEPLPLAN
else
	SETDEEPLPLAN="free"
	export SETDEEPLPLAN
fi

# set Owner defaults if not set
if [ -n "${OWNERNAME+x}" ]; then
	SETOWNERNAME="$OWNERNAME"
	export SETOWNERNAME
else
    SETOWNERNAME="admin"
    export SETOWNERNAME
fi
if [ -n "${OWNEREMAIL+x}" ]; then
	SETOWNEREMAIL="$OWNEREMAIL"
	export SETOWNEREMAIL
else
	SETOWNEREMAIL="set@email.address"
	export SETOWNEREMAIL
fi

# set default S3 upload protocol
# defaults to https if not set, or http if enabled
if [ -n "${S3UPNOSSL+x}" ]; then
	SETS3UPNOSSL="http"
	export SETS3UPNOSSL
else
	SETS3UPNOSSL="https"
	export SETS3UPNOSSL
fi

# stop services
timeout --foreground 10 \
  service consul onestop || service consul onestop || true
killall -9 consul || true

export PATH=/usr/local/share/cook/bin:$PATH

# temp fix, ensure mode 644 for /etc/resolv.conf
# mastodon user ruby process needs to read /etc/resolv.conf
# to perform DNS lookups
###
chmod 644 /etc/resolv.conf
###

if [ -n "${REMOTELOG}" ]; then
    log "Configure and start syslog-ng"
    configure-syslog-ng.sh
fi

log "Setup node_exporter"
configure-node-exporter.sh

log "Setup blackbox_exporter"
configure-blackbox-exporter.sh

log "Configure consul"
configure-consul.sh

log "Start consul and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service consul status; do
    service consul start || true; sleep 5;
  done'

log "Start node_exporter"
service node_exporter start || true

log "Start blackbox_exporter"
service blackbox_exporter start || true

if [ -n "${PVTCERT}" ]; then
	log "Configure ssl"
	configure-ssl.sh
else
	log "Configure acme.sh"
	configure-acme.sh
fi

log "Configure nginx"
configure-nginx.sh

# configure mastodon
log "Configure mastodon"
configure-mastodon.sh

log "Start nginx"
#service nginx start || true
timeout --foreground 120 \
  sh -c 'while ! service nginx status; do
    service nginx start || true; sleep 5;
  done'

# start mastodon services
log "Start mastodon_sidekiq"
service mastodon_sidekiq start || true

log "Start mastodon_streaming"
service mastodon_streaming start || true

log "Start mastodon_web"
service mastodon_web start || true

# exit
log "Exit seasoned"
pot_seasoned_exit
