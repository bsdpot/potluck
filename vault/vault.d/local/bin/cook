#!/bin/sh
RUNS_IN_NOMAD=false
COOKLOG=/var/log/cook.log

export HOME=/root

# log function
log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now after configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# always disable sshd, we don't need direct access
# XXX: Do this when baking the image
service sshd stop || true
service sshd disable || true

# Make cook binaries accessible in PATH
export PATH=/usr/local/share/cook/bin:$PATH

# Read in pot environment
if [ -e /tmp/environment.sh ]; then
    set -e
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
    set +e
fi

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

set -e

########################################################################
## Check config
########################################################################

# Check config variables
case "$VAULTTYPE" in
unseal|cluster) ;; # ok
*) log "VAULTTYPE is not configured correctlyunset - please set the \
type of instance to launch from unseal, cluster. This parameter is \
mandatory for all vault image types."
    exit 1
    ;;
esac

required_args="DATACENTER IP NODENAME ATTL BTTL"
optional_args=""

if [ "$VAULTTYPE" = "cluster" ]; then
    required_args="$required_args UNSEALIP CONSULSERVERS"
    optional_args="REMOTELOG DNSFORWARDERS"
fi

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision images
########################################################################

service vault onestop || true
killall -9 vault || true

log "Create directories for vault usage"
mkdir -p /mnt/log
mkdir -p /mnt/templates
mkdir -p /mnt/vaultcerts

export PATH=/usr/local/share/cook/bin:$PATH

##########################################################################
### Vault type: Unseal Node - no consul or node_template setup
##########################################################################
if [ "$VAULTTYPE" = "unseal" ]; then
    export VAULT_CLIENT_TIMEOUT=300s

    log "Configure unseal vault"
    unseal-configure-vault.sh

    log "Symlink helper scripts"
    ln -s /usr/local/share/cook/bin/unseal-vault-status.sh \
      /root/vault-status.sh
    ln -s /usr/local/share/cook/bin/unseal-vault.sh \
      /root/vault.sh

    # start vault
    log "Start Vault Unseal Node"
    timeout --foreground 120 \
      sh -c 'while ! service vault status; do
        service vault start || true; sleep 5;
      done'

    log "\
------------------------------------------------------------------
Unseal node is almost complete, you must now login and manually
run the following
commands to complete the setup:

  1. Init
  vault operator init -address=http://127.0.0.1:8200

  2. Unseal
  vault operator unseal -address=http://127.0.0.1:8200
     (paste key1)
  vault operator unseal -address=http://127.0.0.1:8200
     (paste key2)
  vault operator unseal -address=http://127.0.0.1:8200
     (paste key3)
  vault login -address=http://127.0.0.1:8200
     (use token from operator init)

  3. Create PKI and restart vault with TLS
  $(which unseal-setup-unseal-pki.sh)

  4. Unseal again (see 2.)

  5. Start Consul Template
  $(which unseal-start-consul-template.sh)

Step 5 has to happen within a couple of minutes from step 3.

To issue unseal tokens for each RAFT cluster node, run
$(which unseal-issue-unseal-credentials.sh)

You must run this for each node in your cluster. Every node needs
an unseal token.
------------------------------------------------------------------\
"
    # end unseal config
    pot_seasoned_exit
fi

##########################################################################
### Vault type: Cluster (both leader and follower)
##########################################################################
export VAULT_CLIENT_TIMEOUT=300s
export VAULT_MAX_RETRIES=5

log "Set up local_unbound using static vault ip"
cluster-setup-local-unbound-static.sh "$IP"

log "Wait until we are able to resolve active vault instance"
timeout --foreground 120 \
  sh -c 'while ! host -ta active.vault.service.consul; do sleep 1; done'

log "Unwrap unseal credentials"
cluster-unwrap-unseal-credentials.sh

log "Configure vault"
cluster-configure-vault.sh

log "Configure consul"
cluster-configure-consul.sh

log "Start consul (won't keep running)"
service consul start

log "Configure nodemetricsproxy"
cluster-configure-nodemetricsproxy.sh

log "Configure nomadproxy"
cluster-configure-nomadproxy.sh

log "Setup node_exporter"
cluster-configure-node-exporter.sh

log "Start unsealproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status unsealproxy; do
    service nginx start unsealproxy || true; sleep 3;
  done'

log "Start consul-template-unseal"
service consul-template-unseal start

log "Start Vault"
timeout --foreground 120 \
  sh -c 'while ! service vault status; do
    service vault start || true; sleep 5;
  done'

log "Symlink helper scripts"
ln -s /usr/local/share/cook/bin/cluster-vault-status.sh \
  /root/vault-status.sh
ln -s /usr/local/share/cook/bin/cluster-raft-status.sh \
  /root/raft-status.sh
ln -s /usr/local/share/cook/bin/cluster-vault.sh \
  /root/vault.sh

# syslogng is configured later in the process, as it requires
# metrics certificates

log "Start node_exporter"
service node_exporter start

log "Exit seasoned"
pot_seasoned_exit
